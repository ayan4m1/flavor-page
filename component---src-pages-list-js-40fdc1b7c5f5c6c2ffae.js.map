{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Table.js","webpack:///./src/pages/list.js"],"names":["Table","forwardRef","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","classes","table","createElement","responsiveClass","ListPage","data","vendors","allVendorsCsv","nodes","flavors","listsJson","map","flavor","vendor","find","vend","code","vendorCode","name","author","title","href","target","rel","key","flavorName","url","atfAverage","pageQuery"],"mappings":"2FAAA,kFAKIA,EAAQ,IAAMC,YAAW,SAAUC,EAAMC,GAC3C,IAAIC,EAAWF,EAAKE,SAChBC,EAAYH,EAAKG,UACjBC,EAAUJ,EAAKI,QACfC,EAAWL,EAAKK,SAChBC,EAAaN,EAAKM,WAClBC,EAAQP,EAAKO,MACbC,EAAOR,EAAKQ,KACZC,EAAUT,EAAKS,QACfC,EAAaV,EAAKU,WAClBC,EAAQ,YAA8BX,EAAM,CAAC,WAAY,YAAa,UAAW,WAAY,aAAc,QAAS,OAAQ,UAAW,eAEvIY,EAAoB,YAAmBV,EAAU,SACjDW,EAAU,IAAWV,EAAWS,EAAmBH,GAAWG,EAAoB,IAAMH,EAASD,GAAQI,EAAoB,IAAMJ,EAAMJ,GAAWQ,EAAoB,WAAYP,GAAYO,EAAoB,YAAaN,GAAcM,EAAoB,cAAeL,GAASK,EAAoB,UAC/SE,EAAqB,IAAMC,cAAc,QAAS,YAAS,GAAIJ,EAAO,CACxER,UAAWU,EACXZ,IAAKA,KAGP,GAAIS,EAAY,CACd,IAAIM,EAAkBJ,EAAoB,cAM1C,MAJ0B,iBAAfF,IACTM,EAAkBA,EAAkB,IAAMN,GAGxB,IAAMK,cAAc,MAAO,CAC7CZ,UAAWa,GACVF,GAGL,OAAOA,KAEM,O,kCCpCf,sJAMe,SAASG,EAAT,GAA6B,IAATC,EAAQ,EAARA,KAC3BC,EAAUD,EAAKE,cAAcC,MAC7BC,EAAUJ,EAAKK,UAAUD,QAAQE,KAAI,SAACC,GAC1C,IAAMC,EAASP,EAAQQ,MAAK,SAACC,GAAD,OAAUA,EAAKC,OAASJ,EAAOK,cAE3D,OAAO,OAAP,UACKL,EADL,CAEEC,cAPqC,EAWhBR,EAAKK,UAAtBQ,EAXiC,EAWjCA,KAAMC,EAX2B,EAW3BA,OAEd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,MAAOF,IACf,4BAAKA,GACL,iCACK,IACH,uBACEG,KAAI,wBAA0BF,EAC9BG,OAAO,SACPC,IAAI,uBAEHJ,IAGL,kBAAC,IAAD,CAAO5B,SAAO,EAACG,OAAK,GAClB,+BACE,sCACA,sCACA,8CAEF,+BACGe,EAAQE,KAAI,SAACC,GAAD,eACX,wBAAIY,IAAKZ,EAAOa,YACd,4BACGb,EAAOC,OACN,uBACEQ,KAAI,UAAET,EAAOC,cAAT,aAAE,EAAea,IACrBJ,OAAO,SACPC,IAAI,uBAHN,UAKGX,EAAOC,cALV,aAKG,EAAeK,MAGlBN,EAAOK,YAGX,4BAAKL,EAAOa,YACZ,4BAAKb,EAAOe,mBAanB,IAAMC,EAAS","file":"component---src-pages-list-js-40fdc1b7c5f5c6c2ffae.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = /*#__PURE__*/React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;","import { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Table } from 'react-bootstrap';\n\nimport Layout from '~components/Layout';\nimport { Helmet } from 'react-helmet';\n\nexport default function ListPage({ data }) {\n  const vendors = data.allVendorsCsv.nodes;\n  const flavors = data.listsJson.flavors.map((flavor) => {\n    const vendor = vendors.find((vend) => vend.code === flavor.vendorCode);\n\n    return {\n      ...flavor,\n      vendor\n    };\n  });\n\n  const { name, author } = data.listsJson;\n\n  return (\n    <Layout>\n      <Helmet title={name} />\n      <h1>{name}</h1>\n      <h3>\n        by{' '}\n        <a\n          href={`https://reddit.com/u/${author}`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {author}\n        </a>\n      </h3>\n      <Table striped hover>\n        <thead>\n          <th>Vendor</th>\n          <th>Flavor</th>\n          <th>ATF Average %</th>\n        </thead>\n        <tbody>\n          {flavors.map((flavor) => (\n            <tr key={flavor.flavorName}>\n              <td>\n                {flavor.vendor ? (\n                  <a\n                    href={flavor.vendor?.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {flavor.vendor?.name}\n                  </a>\n                ) : (\n                  flavor.vendorCode\n                )}\n              </td>\n              <td>{flavor.flavorName}</td>\n              <td>{flavor.atfAverage}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Layout>\n  );\n}\n\nListPage.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nexport const pageQuery = graphql`\n  query($code: String) {\n    listsJson(code: { eq: $code }) {\n      name\n      author\n      flavors {\n        vendorCode\n        flavorName\n        atfAverage\n      }\n    }\n\n    allVendorsCsv {\n      nodes {\n        code\n        name\n        url\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}